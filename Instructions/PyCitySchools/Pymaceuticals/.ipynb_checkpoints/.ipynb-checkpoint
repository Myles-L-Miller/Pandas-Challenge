{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f932</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Male</td>\n",
       "      <td>15</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>g107</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Female</td>\n",
       "      <td>2</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a457</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Female</td>\n",
       "      <td>11</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>c819</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites Drug Regimen  \\\n",
       "0     b128          0                45.0                 0    Capomulin   \n",
       "1     f932          0                45.0                 0     Ketapril   \n",
       "2     g107          0                45.0                 0     Ketapril   \n",
       "3     a457          0                45.0                 0     Ketapril   \n",
       "4     c819          0                45.0                 0     Ketapril   \n",
       "\n",
       "      Sex  Age_months  Weight (g)  \n",
       "0  Female           9          22  \n",
       "1    Male          15          29  \n",
       "2  Female           2          29  \n",
       "3  Female          11          30  \n",
       "4    Male          21          25  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata_path = \"data/Mouse_metadata.csv\"\n",
    "study_results_path = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata_path)\n",
    "study_results = pd.read_csv(study_results_path)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "combined=pd.merge(study_results,mouse_metadata,on=\"Mouse ID\",how=\"left\")\n",
    "# Display the data table for preview\n",
    "combined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice.\n",
    "mouse_metadata[\"Mouse ID\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mouse ID     g989\n",
      "Timepoint       0\n",
      "Name: 137, dtype: object\n",
      "Mouse ID     g989\n",
      "Timepoint       5\n",
      "Name: 360, dtype: object\n",
      "Mouse ID     g989\n",
      "Timepoint      10\n",
      "Name: 681, dtype: object\n",
      "Mouse ID     g989\n",
      "Timepoint      15\n",
      "Name: 869, dtype: object\n",
      "Mouse ID     g989\n",
      "Timepoint      20\n",
      "Name: 1111, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. \n",
    "for i,x in enumerate(combined.duplicated(subset=['Mouse ID',\"Timepoint\"])):\n",
    "    if x==True:\n",
    "        print(combined.iloc[i,0:2])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>g989</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>g989</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>329</th>\n",
       "      <td>g989</td>\n",
       "      <td>5</td>\n",
       "      <td>48.786801</td>\n",
       "      <td>0</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>g989</td>\n",
       "      <td>5</td>\n",
       "      <td>47.570392</td>\n",
       "      <td>0</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>620</th>\n",
       "      <td>g989</td>\n",
       "      <td>10</td>\n",
       "      <td>51.745156</td>\n",
       "      <td>0</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>g989</td>\n",
       "      <td>10</td>\n",
       "      <td>49.880528</td>\n",
       "      <td>0</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>815</th>\n",
       "      <td>g989</td>\n",
       "      <td>15</td>\n",
       "      <td>51.325852</td>\n",
       "      <td>1</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>g989</td>\n",
       "      <td>15</td>\n",
       "      <td>53.442020</td>\n",
       "      <td>0</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>950</th>\n",
       "      <td>g989</td>\n",
       "      <td>20</td>\n",
       "      <td>55.326122</td>\n",
       "      <td>1</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1111</th>\n",
       "      <td>g989</td>\n",
       "      <td>20</td>\n",
       "      <td>54.657650</td>\n",
       "      <td>1</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1195</th>\n",
       "      <td>g989</td>\n",
       "      <td>25</td>\n",
       "      <td>56.045564</td>\n",
       "      <td>1</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1380</th>\n",
       "      <td>g989</td>\n",
       "      <td>30</td>\n",
       "      <td>59.082294</td>\n",
       "      <td>1</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1592</th>\n",
       "      <td>g989</td>\n",
       "      <td>35</td>\n",
       "      <td>62.570880</td>\n",
       "      <td>2</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites Drug Regimen  \\\n",
       "107      g989          0           45.000000                 0     Propriva   \n",
       "137      g989          0           45.000000                 0     Propriva   \n",
       "329      g989          5           48.786801                 0     Propriva   \n",
       "360      g989          5           47.570392                 0     Propriva   \n",
       "620      g989         10           51.745156                 0     Propriva   \n",
       "681      g989         10           49.880528                 0     Propriva   \n",
       "815      g989         15           51.325852                 1     Propriva   \n",
       "869      g989         15           53.442020                 0     Propriva   \n",
       "950      g989         20           55.326122                 1     Propriva   \n",
       "1111     g989         20           54.657650                 1     Propriva   \n",
       "1195     g989         25           56.045564                 1     Propriva   \n",
       "1380     g989         30           59.082294                 1     Propriva   \n",
       "1592     g989         35           62.570880                 2     Propriva   \n",
       "\n",
       "         Sex  Age_months  Weight (g)  \n",
       "107   Female          21          26  \n",
       "137   Female          21          26  \n",
       "329   Female          21          26  \n",
       "360   Female          21          26  \n",
       "620   Female          21          26  \n",
       "681   Female          21          26  \n",
       "815   Female          21          26  \n",
       "869   Female          21          26  \n",
       "950   Female          21          26  \n",
       "1111  Female          21          26  \n",
       "1195  Female          21          26  \n",
       "1380  Female          21          26  \n",
       "1592  Female          21          26  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Optional: Get all the data for the duplicate mouse ID. \n",
    "# Multiple data points for \"g989?\"\n",
    "\n",
    "combined.loc[combined[\"Mouse ID\"]==\"g989\",:]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We started with 1893 datapoints.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create a clean DataFrame by dropping the duplicate mouse by its ID.\n",
    "print(\"We started with\",combined[\"Mouse ID\"].count(),\"datapoints.\\n\")\n",
    "combined_clean=combined[combined[\"Mouse ID\"] != 'g989']\n",
    "mouse_metadata_clean=mouse_metadata[mouse_metadata[\"Mouse ID\"] != 'g989']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We now have 1880 datapoints.\n"
     ]
    }
   ],
   "source": [
    "# Checking the number of mice in the clean DataFrame.\n",
    "print(\"We now have\",combined_clean[\"Mouse ID\"].count(),\"datapoints.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Mean Tumor Volume</th>\n",
       "      <th>Median Tumor Volume</th>\n",
       "      <th>Tumor Volume Variance</th>\n",
       "      <th>Tumor Volume Std. Deviation</th>\n",
       "      <th>Tumor Volume SEM</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ceftamin</td>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Infubinol</td>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ketapril</td>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Naftisol</td>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Placebo</td>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>61.168083</td>\n",
       "      <td>7.821003</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Propriva</td>\n",
       "      <td>52.320930</td>\n",
       "      <td>50.446266</td>\n",
       "      <td>43.852013</td>\n",
       "      <td>6.622085</td>\n",
       "      <td>0.544332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ramicane</td>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>23.486704</td>\n",
       "      <td>4.846308</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Stelasyn</td>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>59.450562</td>\n",
       "      <td>7.710419</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Zoniferol</td>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>48.533355</td>\n",
       "      <td>6.966589</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Drug Regimen  Mean Tumor Volume  Median Tumor Volume  Tumor Volume Variance  \\\n",
       "0    Capomulin          40.675741            41.557809              24.947764   \n",
       "1     Ceftamin          52.591172            51.776157              39.290177   \n",
       "2    Infubinol          52.884795            51.820584              43.128684   \n",
       "3     Ketapril          55.235638            53.698743              68.553577   \n",
       "4     Naftisol          54.331565            52.509285              66.173479   \n",
       "5      Placebo          54.033581            52.288934              61.168083   \n",
       "6     Propriva          52.320930            50.446266              43.852013   \n",
       "7     Ramicane          40.216745            40.673236              23.486704   \n",
       "8     Stelasyn          54.233149            52.431737              59.450562   \n",
       "9    Zoniferol          53.236507            51.818479              48.533355   \n",
       "\n",
       "   Tumor Volume Std. Deviation  Tumor Volume SEM  \n",
       "0                     4.994774          0.329346  \n",
       "1                     6.268188          0.469821  \n",
       "2                     6.567243          0.492236  \n",
       "3                     8.279709          0.603860  \n",
       "4                     8.134708          0.596466  \n",
       "5                     7.821003          0.581331  \n",
       "6                     6.622085          0.544332  \n",
       "7                     4.846308          0.320955  \n",
       "8                     7.710419          0.573111  \n",
       "9                     6.966589          0.516398  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "Summary_Grp=combined_clean.groupby([\"Drug Regimen\"])\n",
    "# Use groupby and summary statistical methods to calculate the following properties of each drug regimen: \n",
    "# mean, median, variance, standard deviation, and SEM of the tumor volume. \n",
    "# Assemble the resulting series into a single summary dataframe.\n",
    "Summary=Summary_Grp[\"Tumor Volume (mm3)\"].mean().reset_index(name=\"Mean Tumor Volume\")\n",
    "Summary=pd.merge(Summary,Summary_Grp[\"Tumor Volume (mm3)\"].median().reset_index(name=\"Median Tumor Volume\"),on=\"Drug Regimen\",how=\"left\")\n",
    "Summary=pd.merge(Summary,Summary_Grp[\"Tumor Volume (mm3)\"].var().reset_index(name=\"Tumor Volume Variance\"),on=\"Drug Regimen\",how=\"left\")\n",
    "Summary=pd.merge(Summary,Summary_Grp[\"Tumor Volume (mm3)\"].std().reset_index(name=\"Tumor Volume Std. Deviation\"),on=\"Drug Regimen\",how=\"left\")\n",
    "Summary=pd.merge(Summary,Summary_Grp[\"Tumor Volume (mm3)\"].sem().reset_index(name=\"Tumor Volume SEM\"),on=\"Drug Regimen\",how=\"left\")\n",
    "\n",
    "Summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>var</th>\n",
       "      <th>std</th>\n",
       "      <th>sem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capomulin</th>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ceftamin</th>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infubinol</th>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ketapril</th>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naftisol</th>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Placebo</th>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>61.168083</td>\n",
       "      <td>7.821003</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propriva</th>\n",
       "      <td>52.320930</td>\n",
       "      <td>50.446266</td>\n",
       "      <td>43.852013</td>\n",
       "      <td>6.622085</td>\n",
       "      <td>0.544332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ramicane</th>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>23.486704</td>\n",
       "      <td>4.846308</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stelasyn</th>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>59.450562</td>\n",
       "      <td>7.710419</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoniferol</th>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>48.533355</td>\n",
       "      <td>6.966589</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Tumor Volume (mm3)                                          \n",
       "                           mean     median        var       std       sem\n",
       "Drug Regimen                                                             \n",
       "Capomulin             40.675741  41.557809  24.947764  4.994774  0.329346\n",
       "Ceftamin              52.591172  51.776157  39.290177  6.268188  0.469821\n",
       "Infubinol             52.884795  51.820584  43.128684  6.567243  0.492236\n",
       "Ketapril              55.235638  53.698743  68.553577  8.279709  0.603860\n",
       "Naftisol              54.331565  52.509285  66.173479  8.134708  0.596466\n",
       "Placebo               54.033581  52.288934  61.168083  7.821003  0.581331\n",
       "Propriva              52.320930  50.446266  43.852013  6.622085  0.544332\n",
       "Ramicane              40.216745  40.673236  23.486704  4.846308  0.320955\n",
       "Stelasyn              54.233149  52.431737  59.450562  7.710419  0.573111\n",
       "Zoniferol             53.236507  51.818479  48.533355  6.966589  0.516398"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "Summary2=combined_clean[[\"Drug Regimen\",\"Tumor Volume (mm3)\"]].groupby([\"Drug Regimen\"]).agg(['mean','median','var','std','sem'])\n",
    "# Using the aggregation method, produce the same summary statistics in a single line\n",
    "Summary2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar and Pie Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x14b670a8ca0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of unique mice tested on each drug regimen using pandas.\n",
    "mouse_metadata_clean.groupby([\"Drug Regimen\"])[\"Mouse ID\"].count().reset_index(name=\"Count of Mouse ID\").plot.bar(x=\"Drug Regimen\",y=\"Count of Mouse ID\",legend=False,title=\"Number of Mice by Drug Regimen\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of unique mice tested on each drug regimen using pyplot.\n",
    "barPlot=mouse_metadata_clean.groupby([\"Drug Regimen\"])[\"Mouse ID\"].count()\n",
    "\n",
    "y=barPlot.values\n",
    "x=barPlot.index.values\n",
    "\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.bar(x,y,color=\"c\")\n",
    "plt.title(\"Number of Mice by Drug Regimen\")\n",
    "plt.xlabel(\"Drug Regimen\")\n",
    "plt.ylabel(\"Mice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x14b671467f0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "mouse_metadata_clean.groupby([\"Sex\"])[\"Mouse ID\"].count().plot.pie(title=\"Distribution of Gender in Test\",label=\"\",autopct=\"%1.1f%%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "piePlot=mouse_metadata_clean.groupby([\"Sex\"])[\"Mouse ID\"].count().reset_index(name=\"Count of Mouse ID\")\n",
    "labs = piePlot[\"Sex\"]\n",
    "Count = piePlot[\"Count of Mouse ID\"]\n",
    "colors = [\"lightcoral\",\"lightblue\"]\n",
    "plt.pie(Count, labels=labs, colors=colors,autopct=\"%1.1f%%\")\n",
    "plt.title(\"Distribution of Gender in Test\")\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, Outliers and Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>b128</td>\n",
       "      <td>45</td>\n",
       "      <td>38.982878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>b742</td>\n",
       "      <td>45</td>\n",
       "      <td>38.939633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>f966</td>\n",
       "      <td>20</td>\n",
       "      <td>30.485985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>g288</td>\n",
       "      <td>45</td>\n",
       "      <td>37.074024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>g316</td>\n",
       "      <td>45</td>\n",
       "      <td>40.159220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Ramicane</td>\n",
       "      <td>s508</td>\n",
       "      <td>45</td>\n",
       "      <td>30.276232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>Ramicane</td>\n",
       "      <td>u196</td>\n",
       "      <td>45</td>\n",
       "      <td>40.667713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>Ramicane</td>\n",
       "      <td>w678</td>\n",
       "      <td>5</td>\n",
       "      <td>43.166373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Ramicane</td>\n",
       "      <td>y449</td>\n",
       "      <td>15</td>\n",
       "      <td>44.183451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>Ramicane</td>\n",
       "      <td>z578</td>\n",
       "      <td>45</td>\n",
       "      <td>30.638696</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Drug Regimen Mouse ID  Timepoint  Tumor Volume (mm3)\n",
       "0     Capomulin     b128         45           38.982878\n",
       "1     Capomulin     b742         45           38.939633\n",
       "2     Capomulin     f966         20           30.485985\n",
       "3     Capomulin     g288         45           37.074024\n",
       "4     Capomulin     g316         45           40.159220\n",
       "..          ...      ...        ...                 ...\n",
       "95     Ramicane     s508         45           30.276232\n",
       "96     Ramicane     u196         45           40.667713\n",
       "97     Ramicane     w678          5           43.166373\n",
       "98     Ramicane     y449         15           44.183451\n",
       "99     Ramicane     z578         45           30.638696\n",
       "\n",
       "[100 rows x 4 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the treatment regimens:  \n",
    "# Capomulin, Ramicane, Infubinol, and Ceftamin\n",
    "Top4=combined_clean.loc[(combined_clean[\"Drug Regimen\"]==\"Capomulin\")|(combined_clean[\"Drug Regimen\"]==\"Ramicane\")|(combined_clean[\"Drug Regimen\"]==\"Infubinol\")|(combined_clean[\"Drug Regimen\"]==\"Ceftamin\") ,:]\n",
    "# Start by getting the last (greatest) timepoint for each mouse\n",
    "Top4=Top4.groupby([\"Drug Regimen\",\"Mouse ID\"])[\"Timepoint\"].max().reset_index()\n",
    "# Merge this group data frame with the original dataframe to get the tumor volume at the last timepoint\n",
    "Top4=pd.merge(Top4,combined_clean[[\"Mouse ID\",\"Timepoint\",\"Tumor Volume (mm3)\"]],on=[\"Mouse ID\",\"Timepoint\"],how=\"left\")\n",
    "Top4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lower quartile of Capomulin tumor volume is: 32.37735684\n",
      "The upper quartile of Capomulin tumor volume is: 40.1592203\n",
      "The interquartile range of Capomulin tumor volume is: 7.781863460000004\n",
      "The the median of Capomulin tumor volume is: 38.125164399999996 \n",
      "Values below 20.70456164999999 could be outliers.\n",
      "Values above 51.83201549 could be outliers.\n",
      "There are no potential outliers for Capomulin.\n",
      "\n",
      "The lower quartile of Ramicane tumor volume is: 31.56046955\n",
      "The upper quartile of Ramicane tumor volume is: 40.65900627\n",
      "The interquartile range of Ramicane tumor volume is: 9.098536719999998\n",
      "The the median of Ramicane tumor volume is: 36.56165229 \n",
      "Values below 17.912664470000003 could be outliers.\n",
      "Values above 54.30681135 could be outliers.\n",
      "There are no potential outliers for Ramicane.\n",
      "\n",
      "The lower quartile of Infubinol tumor volume is: 54.04860769\n",
      "The upper quartile of Infubinol tumor volume is: 65.52574285\n",
      "The interquartile range of Infubinol tumor volume is: 11.477135160000003\n",
      "The the median of Infubinol tumor volume is: 60.16518046 \n",
      "Values below 36.83290494999999 could be outliers.\n",
      "Values above 82.74144559000001 could be outliers.\n",
      "The the potential outliers for Infubinol are: [36.321345799999996]\n",
      "\n",
      "The lower quartile of Ceftamin tumor volume is: 48.72207785\n",
      "The upper quartile of Ceftamin tumor volume is: 64.29983003\n",
      "The interquartile range of Ceftamin tumor volume is: 15.577752179999997\n",
      "The the median of Ceftamin tumor volume is: 59.85195552 \n",
      "Values below 25.355449580000002 could be outliers.\n",
      "Values above 87.66645829999999 could be outliers.\n",
      "There are no potential outliers for Ceftamin.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Put treatments into a list for for loop (and later for plot labels)\n",
    "Treatments=[\"Capomulin\",\"Ramicane\",\"Infubinol\",\"Ceftamin\"]\n",
    "\n",
    "# Create empty list to fill with tumor vol data (for plotting)\n",
    "Tumors=[[] for i in range(4)]\n",
    "for i in range(100):\n",
    "    DR=Top4.iloc[i,:][\"Drug Regimen\"]\n",
    "    Tum=Top4.iloc[i,:][\"Tumor Volume (mm3)\"]\n",
    "    for j in range(4):\n",
    "        if DR==Treatments[j]:\n",
    "            Tumors[j].append(Tum)\n",
    "            continue\n",
    "# Calculate the IQR and quantitatively determine if there are any potential outliers. \n",
    "quartiles=[[] for i in range(4)]\n",
    "lowerq=[[] for i in range(4)]\n",
    "upperq=[[] for i in range(4)]\n",
    "iqr=[[] for i in range(4)]\n",
    "lower_bound=[[] for i in range(4)]\n",
    "upper_bound=[[] for i in range(4)]\n",
    "potential_outliers=[[] for i in range(4)]\n",
    "\n",
    "for Num,Treatment in enumerate(Treatments):\n",
    "    quartiles[Num] = Top4.loc[Top4[\"Drug Regimen\"]==Treatment,:][\"Tumor Volume (mm3)\"].quantile([.25,.5,.75])\n",
    "    lowerq[Num] = quartiles[Num][0.25]\n",
    "    upperq[Num] = quartiles[Num][0.75]\n",
    "    iqr[Num] = upperq[Num]-lowerq[Num]\n",
    "\n",
    "    print(f\"The lower quartile of {Treatment} tumor volume is: {lowerq[Num]}\")\n",
    "    print(f\"The upper quartile of {Treatment} tumor volume is: {upperq[Num]}\")\n",
    "    print(f\"The interquartile range of {Treatment} tumor volume is: {iqr[Num]}\")\n",
    "    print(f\"The the median of {Treatment} tumor volume is: {quartiles[Num][0.5]} \")\n",
    "\n",
    "    lower_bound[Num] = lowerq[Num] - (1.5*iqr[Num])\n",
    "    upper_bound[Num] = upperq[Num] + (1.5*iqr[Num])\n",
    "    print(f\"Values below {lower_bound[Num]} could be outliers.\")\n",
    "    print(f\"Values above {upper_bound[Num]} could be outliers.\")\n",
    "\n",
    "    #Printing any potential outliers\n",
    "    for Tumor in Tumors[Num]:\n",
    "        if Tumor>upper_bound[Num] or Tumor < lower_bound[Num]:\n",
    "            potential_outliers[Num].append(Tumor)\n",
    "    if len(potential_outliers[Num])>0:\n",
    "        print(f\"The the potential outliers for {Treatment} are: {potential_outliers[Num]}\\n\")\n",
    "    else:\n",
    "        print(f\"There are no potential outliers for {Treatment}.\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest\n",
    "fig, (ax1, ax2, ax3, ax4) = plt.subplots(ncols=4,sharey=True,figsize=(7,5))\n",
    "fig.suptitle(\"Final Tumor Volumes by Regimen\", fontsize=16, fontweight=\"bold\")\n",
    "\n",
    "ax1.set_ylabel('Volume (mm3)')\n",
    "ax1.set_title(Treatments[0])\n",
    "ax1.boxplot(Tumors[0])\n",
    "ax1.set_xticks([])\n",
    "\n",
    "ax2.set_title(Treatments[1])\n",
    "ax2.boxplot(Tumors[1])\n",
    "ax2.set_xticks([])\n",
    "\n",
    "ax3.set_title(Treatments[2])\n",
    "ax3.boxplot(Tumors[2])\n",
    "ax3.set_xticks([])\n",
    "\n",
    "ax4.set_title(Treatments[3])\n",
    "ax4.boxplot(Tumors[3])\n",
    "ax4.set_xticks([])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and Scatter Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a line plot of tumor volume vs. time point for a mouse treated with Capomulin\n",
    "Single_Mouse=combined_clean.loc[combined_clean[\"Mouse ID\"]=='j246',:]\n",
    "x_axis=Single_Mouse[\"Timepoint\"].count()\n",
    "plt.plot(Single_Mouse[\"Timepoint\"],Single_Mouse[\"Tumor Volume (mm3)\"],marker='s',color=\"y\")\n",
    "plt.title(\"Tumor Volume of Mouse ID j246 Over Time\")\n",
    "plt.xlabel(\"Timepoint\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "plt.ylim(35,50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a scatter plot of average tumor volume vs. mouse weight for the Capomulin regimen\n",
    "Weight_df=combined_clean.loc[combined_clean[\"Drug Regimen\"]==\"Capomulin\",:]\n",
    "# Reduce to final timepoint per mouse\n",
    "Weight_df=Weight_df.groupby([\"Drug Regimen\",\"Mouse ID\"])[\"Timepoint\"].max().reset_index()\n",
    "# Merge this group df with the original dataframe to get the tumor volume at the last timepoint\n",
    "Weight_df=pd.merge(Weight_df,combined_clean[[\"Mouse ID\",\"Timepoint\",\"Tumor Volume (mm3)\",\"Weight (g)\"]],on=[\"Mouse ID\",\"Timepoint\"],how=\"left\")\n",
    "Weight_df=Weight_df.groupby([\"Weight (g)\"])[\"Tumor Volume (mm3)\"].mean().reset_index(name=\"Average Tumor Volume\")\n",
    "#Weight_df.head()\n",
    "plt.scatter(Weight_df[\"Weight (g)\"], Weight_df[\"Average Tumor Volume\"], marker=\"^\", facecolors=\"red\", edgecolors=\"black\")\n",
    "plt.title(\"Mouse Weight vs Average Final Tumor Volume\")\n",
    "plt.xlabel(\"Mouse Weight (g)\")\n",
    "plt.ylabel(\"Average Final Tumor Volume (mm3)\")\n",
    "plt.xlim(14,26)\n",
    "plt.ylim(26,50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation and Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The correlation coefficient between weight and average final tumor volume is 0.95\n"
     ]
    }
   ],
   "source": [
    "# Calculate the correlation coefficient and linear regression model \n",
    "# Based on mouse weight and average tumor volume for the Capomulin regimen\n",
    "m_slope, m_int, m_r, m_p, m_std_err = st.linregress(Weight_df[\"Weight (g)\"], Weight_df[\"Average Tumor Volume\"])\n",
    "m_fit = m_slope * Weight_df[\"Weight (g)\"] + m_int\n",
    "plt.scatter(Weight_df[\"Weight (g)\"], Weight_df[\"Average Tumor Volume\"], marker=\"^\", facecolors=\"red\", edgecolors=\"black\")\n",
    "plt.title(\"Mouse Weight vs Average Final Tumor Volume\")\n",
    "plt.xlabel(\"Mouse Weight (g)\")\n",
    "plt.ylabel(\"Average Final Tumor Volume (mm3)\")\n",
    "plt.xlim(14,26)\n",
    "plt.ylim(26,50)\n",
    "plt.plot(Weight_df[\"Weight (g)\"],m_fit,\"--\",color=\"black\",alpha=.5)\n",
    "plt.show()\n",
    "\n",
    "#Correlation Coefficient\n",
    "W=Weight_df[\"Weight (g)\"]\n",
    "A=Weight_df[\"Average Tumor Volume\"]\n",
    "print(f\"The correlation coefficient between weight and average final tumor volume is {round(st.pearsonr(W,A)[0],2)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
