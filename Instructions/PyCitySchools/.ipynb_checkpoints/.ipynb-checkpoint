{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "* Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import pandas as pd\n",
    "\n",
    "# File to Load (Remember to Change These)\n",
    "school_data_to_load = \"Resources/schools_complete.csv\"\n",
    "student_data_to_load = \"Resources/students_complete.csv\"\n",
    "\n",
    "# Read School and Student Data File and store into Pandas DataFrames\n",
    "school_data = pd.read_csv(school_data_to_load)\n",
    "student_data = pd.read_csv(student_data_to_load)\n",
    "\n",
    "# Combine the data into a single dataset.  \n",
    "school_data_complete = pd.merge(student_data, school_data, how=\"left\", on=[\"school_name\", \"school_name\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## District Summary\n",
    "\n",
    "* Calculate the total number of schools\n",
    "\n",
    "* Calculate the total number of students\n",
    "\n",
    "* Calculate the total budget\n",
    "\n",
    "* Calculate the average math score \n",
    "\n",
    "* Calculate the average reading score\n",
    "\n",
    "* Calculate the percentage of students with a passing math score (70 or greater)\n",
    "\n",
    "* Calculate the percentage of students with a passing reading score (70 or greater)\n",
    "\n",
    "* Calculate the percentage of students who passed math **and** reading (% Overall Passing)\n",
    "\n",
    "* Create a dataframe to hold the above results\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Schools</th>\n",
       "      <th>Total Students</th>\n",
       "      <th>Total Budget</th>\n",
       "      <th>Average Math Score</th>\n",
       "      <th>Average Reading Score</th>\n",
       "      <th>Percent Passing Math</th>\n",
       "      <th>Percent Passing Reading</th>\n",
       "      <th>Percent Passing Overall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15</td>\n",
       "      <td>39,170</td>\n",
       "      <td>$24,649,428.00</td>\n",
       "      <td>78.99</td>\n",
       "      <td>81.88</td>\n",
       "      <td>74.981%</td>\n",
       "      <td>85.805%</td>\n",
       "      <td>65.172%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Total Schools Total Students    Total Budget Average Math Score  \\\n",
       "0             15         39,170  $24,649,428.00              78.99   \n",
       "\n",
       "  Average Reading Score Percent Passing Math Percent Passing Reading  \\\n",
       "0                 81.88              74.981%                 85.805%   \n",
       "\n",
       "  Percent Passing Overall  \n",
       "0                 65.172%  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Storing Values to make the data frame more readable\n",
    "Total_Students=student_data[\"Student ID\"].count()\n",
    "Students_Passing_Math=student_data.loc[student_data[\"math_score\"]>=70,:][\"Student ID\"].count()\n",
    "Total_Math_Score=student_data[\"math_score\"].sum()\n",
    "Students_Passing_Reading=student_data.loc[student_data[\"reading_score\"]>=70,:][\"Student ID\"].count()\n",
    "Total_Reading_Score=student_data[\"reading_score\"].sum()\n",
    "Students_Passing_Both=student_data.loc[(student_data[\"reading_score\"]>=70) & (student_data[\"math_score\"]>=70),:][\"Student ID\"].count()\n",
    "\n",
    "#District Data Frame\n",
    "District_Summary_df = pd.DataFrame({\n",
    "    \"Total Schools\": [school_data[\"school_name\"].count()],\n",
    "    \"Total Students\": [Total_Students],\n",
    "    \"Total Budget\": [school_data[\"budget\"].sum()],\n",
    "    \"Average Math Score\": [Total_Math_Score/Total_Students],\n",
    "    \"Average Reading Score\": [Total_Reading_Score/Total_Students],\n",
    "    \"Percent Passing Math\": [Students_Passing_Math/Total_Students*100],\n",
    "    \"Percent Passing Reading\": [Students_Passing_Reading/Total_Students*100],\n",
    "    \"Percent Passing Overall\": [Students_Passing_Both/Total_Students*100]\n",
    "})\n",
    "\n",
    "#Clean Format of Data Frame\n",
    "Clean_District=District_Summary_df\n",
    "Clean_District[\"Total Students\"]=Clean_District[\"Total Students\"].map(\"{:,}\".format)\n",
    "Clean_District[\"Total Budget\"]=Clean_District[\"Total Budget\"].map(\"${:,.2f}\".format)\n",
    "Clean_District[\"Average Math Score\"]=Clean_District[\"Average Math Score\"].map(\"{:.2f}\".format)\n",
    "Clean_District[\"Average Reading Score\"]=Clean_District[\"Average Reading Score\"].map(\"{:.2f}\".format)\n",
    "Clean_District[\"Percent Passing Math\"]=Clean_District[\"Percent Passing Math\"].map(\"{:.3f}%\".format)\n",
    "Clean_District[\"Percent Passing Reading\"]=Clean_District[\"Percent Passing Reading\"].map(\"{:.3f}%\".format)\n",
    "Clean_District[\"Percent Passing Overall\"]=Clean_District[\"Percent Passing Overall\"].map(\"{:.3f}%\".format)\n",
    "\n",
    "Clean_District\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## School Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Create an overview table that summarizes key metrics about each school, including:\n",
    "  * School Name\n",
    "  * School Type\n",
    "  * Total Students\n",
    "  * Total School Budget\n",
    "  * Per Student Budget\n",
    "  * Average Math Score\n",
    "  * Average Reading Score\n",
    "  * % Passing Math\n",
    "  * % Passing Reading\n",
    "  * % Overall Passing (The percentage of students that passed math **and** reading.)\n",
    "  \n",
    "* Create a dataframe to hold the above results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "school_totals = school_data_complete[\"school_name\"].nunique()\n",
    "school_totals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002C7E4D36A90>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating a grouped object for me to retrieve aggregate values \n",
    "school_data_complete\n",
    "\n",
    "school_group=school_data_complete.groupby([\"school_name\"])\n",
    "math_group=school_data_complete.loc[school_data_complete[\"math_score\"]>=70,:].groupby([\"school_name\"])\n",
    "math_group\n",
    "#reading_group=school_data_complete.loc[school_data_complete[\"reading_score\"]>=70,:].groupby([\"School Name\"])\n",
    "#overall_group=school_data_complete.loc[(school_data_complete[\"reading_score\"]>=70) & (school_data_complete[\"math_score\"]>=70),:].groupby([\"School Name\"])\n",
    "\n",
    "# #Building out the basic part of the DF, School Name, School Type, Total Students, Total Budget and Budget per student\n",
    "# school_summary=school_data.drop(columns=['School ID']).sort_values([\"school_name\"])\n",
    "# school_summary=school_summary.rename(columns={\"school_name\":\"School Name\", \"type\": \"School Type\", \"size\": \"Total Students\",\"budget\": \"Total School Budget\"}).reset_index(drop=True)\n",
    "# school_summary[\"Per Student Budget\"]=(school_summary[\"Total School Budget\"]/school_summary[\"Total Students\"]).map(\"${:,.2f}\".format)\n",
    "\n",
    "# #Adding in Average Math and Reading Scores\n",
    "# school_summary=pd.merge(school_summary,school_group[\"math_score\"].sum(),on=\"School Name\")\n",
    "# school_summary=pd.merge(school_summary,school_group[\"reading_score\"].sum(),on=\"School Name\")\n",
    "# school_summary[\"Average Math Score\"]=(school_summary[\"math_score\"]/school_summary[\"Total Students\"]).map(\"{:.3f}\".format)\n",
    "# school_summary[\"Average Reading Score\"]=(school_summary[\"reading_score\"]/school_summary[\"Total Students\"]).map(\"{:.3f}\".format)\n",
    "# school_summary=school_summary.drop(columns=[\"math_score\",\"reading_score\"])\n",
    "\n",
    "# #Adding in % passing for 3 categories\n",
    "# school_summary=pd.merge(school_summary,math_group[\"Student ID\"].count(),on=\"School Name\")\n",
    "# school_summary[\"Percent Passing Math\"]=(school_summary[\"Student ID\"]/school_summary[\"Total Students\"]*100).map(\"{:.3f}%\".format)\n",
    "# school_summary=school_summary.drop(columns=[\"Student ID\"])\n",
    "\n",
    "# school_summary=pd.merge(school_summary,reading_group[\"Student ID\"].count(),on=\"School Name\")\n",
    "# school_summary[\"Percent Passing Reading\"]=(school_summary[\"Student ID\"]/school_summary[\"Total Students\"]*100).map(\"{:.3f}%\".format)\n",
    "# school_summary=school_summary.drop(columns=[\"Student ID\"])\n",
    "\n",
    "# school_summary=pd.merge(school_summary,overall_group[\"Student ID\"].count(),on=\"School Name\")\n",
    "# school_summary[\"Percent Overall Passing\"]=(school_summary[\"Student ID\"]/school_summary[\"Total Students\"]*100).map(\"{:.3f}%\".format)\n",
    "# school_summary=school_summary.drop(columns=[\"Student ID\"])\n",
    "\n",
    "# #Cleaning up the format of the original columns\n",
    "# school_summary[\"Total Students\"]=school_summary[\"Total Students\"].map(\"{:,}\".format)\n",
    "# school_summary[\"Total School Budget\"]=school_summary[\"Total School Budget\"].map(\"${:,.2f}\".format)\n",
    "\n",
    "# school_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Top Performing Schools (By % Overall Passing)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Sort and display the top five performing schools by % overall passing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "school_summary.sort_values([\"Percent Overall Passing\"],ascending=False,ignore_index=True).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bottom Performing Schools (By % Overall Passing)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Sort and display the five worst-performing schools by % overall passing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "school_summary.sort_values([\"Percent Overall Passing\"],ignore_index=True).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Math Scores by Grade"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Create a table that lists the average Reading Score for students of each grade level (9th, 10th, 11th, 12th) at each school.\n",
    "\n",
    "  * Create a pandas series for each grade. Hint: use a conditional statement.\n",
    "  \n",
    "  * Group each series by school\n",
    "  \n",
    "  * Combine the series into a dataframe\n",
    "  \n",
    "  * Optional: give the displayed data cleaner formatting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#All calculated inline from the merged table at the beginning of the notebook\n",
    "math_df = pd.DataFrame({\n",
    "    \"9th\": (school_data_complete.loc[school_data_complete[\"grade\"]=='9th',:].groupby([\"School Name\"])[\"math_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='9th',:].groupby([\"School Name\"])[\"math_score\"].count()).map(\"{:.3f}\".format),\n",
    "    \"10th\": (school_data_complete.loc[school_data_complete[\"grade\"]=='10th',:].groupby([\"School Name\"])[\"math_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='10th',:].groupby([\"School Name\"])[\"math_score\"].count()).map(\"{:.3f}\".format),\n",
    "    \"11th\":(school_data_complete.loc[school_data_complete[\"grade\"]=='11th',:].groupby([\"School Name\"])[\"math_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='11th',:].groupby([\"School Name\"])[\"math_score\"].count()).map(\"{:.3f}\".format),\n",
    "    \"12th\":(school_data_complete.loc[school_data_complete[\"grade\"]=='12th',:].groupby([\"School Name\"])[\"math_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='12th',:].groupby([\"School Name\"])[\"math_score\"].count()).map(\"{:.3f}\".format)\n",
    "})\n",
    "math_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading Score by Grade "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Perform the same operations as above for reading scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#All calculated inline from the merged table at the beginning of the notebook\n",
    "reading_df = pd.DataFrame({\n",
    "    \"9th\": (school_data_complete.loc[school_data_complete[\"grade\"]=='9th',:].groupby([\"School Name\"])[\"reading_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='9th',:].groupby([\"School Name\"])[\"reading_score\"].count()).map(\"{:.3f}\".format),\n",
    "    \"10th\": (school_data_complete.loc[school_data_complete[\"grade\"]=='10th',:].groupby([\"School Name\"])[\"reading_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='10th',:].groupby([\"School Name\"])[\"reading_score\"].count()).map(\"{:.3f}\".format),\n",
    "    \"11th\":(school_data_complete.loc[school_data_complete[\"grade\"]=='11th',:].groupby([\"School Name\"])[\"reading_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='11th',:].groupby([\"School Name\"])[\"reading_score\"].count()).map(\"{:.3f}\".format),\n",
    "    \"12th\":(school_data_complete.loc[school_data_complete[\"grade\"]=='12th',:].groupby([\"School Name\"])[\"reading_score\"].sum()/school_data_complete.loc[school_data_complete[\"grade\"]=='12th',:].groupby([\"School Name\"])[\"reading_score\"].count()).map(\"{:.3f}\".format)\n",
    "})\n",
    "reading_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Spending"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Create a table that breaks down school performances based on average Spending Ranges (Per Student). Use 4 reasonable bins to group school spending. Include in the table each of the following:\n",
    "  * Average Math Score\n",
    "  * Average Reading Score\n",
    "  * % Passing Math\n",
    "  * % Passing Reading\n",
    "  * Overall Passing Rate (Average of the above two)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Duplicate the School Data Complete\n",
    "School_Spending=school_data_complete\n",
    "School_Spending[\"Per Student Budget\"]=School_Spending[\"Total School Budget\"]/School_Spending[\"Total Students\"]\n",
    "\n",
    "#Creating evenly disributed bins\n",
    "minimum=School_Spending[\"Per Student Budget\"].min()\n",
    "maximum=School_Spending[\"Per Student Budget\"].max()\n",
    "diff=(maximum-minimum)/4\n",
    "bins=[minimum]\n",
    "for i in range(1,4):\n",
    "    bins.append(minimum+i*diff)\n",
    "bins.append(maximum)\n",
    "Budget_Category=[\"Low\",\"Medium-Low\",\"Medium-High\",\"High\"]\n",
    "\n",
    "\n",
    "#Add the bins to our data\n",
    "School_Spending[\"Budget Category\"]=pd.cut(School_Spending[\"Per Student Budget\"],bins,labels=Budget_Category,include_lowest=False)\n",
    "Spending_Group=School_Spending.groupby([\"Budget Category\"])\n",
    "\n",
    "#Data frame to display results\n",
    "spending_df = pd.DataFrame({\n",
    "    \"Average Math Score\": Spending_Group[\"math_score\"].mean().map(\"{:.3f}\".format),\n",
    "    \"Average Reading Score\": Spending_Group[\"reading_score\"].mean().map(\"{:.3f}\".format),\n",
    "    \"Percent Passing Math\":(School_Spending.loc[School_Spending[\"math_score\"]>=70,:].groupby([\"Budget Category\"])[\"Student ID\"].count()/Spending_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format),\n",
    "    \"Percent Passing Reading\":(School_Spending.loc[School_Spending[\"reading_score\"]>=70,:].groupby([\"Budget Category\"])[\"Student ID\"].count()/Spending_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format),\n",
    "    \"Percent Passing Overall\":(School_Spending.loc[(School_Spending[\"reading_score\"]>=70) & (School_Spending[\"math_score\"]>=70),:].groupby([\"Budget Category\"])[\"Student ID\"].count()/Spending_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format)\n",
    "})\n",
    "\n",
    "\n",
    "spending_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Perform the same operations as above, based on school size."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Duplicate the School Data Complete\n",
    "School_Size=school_data_complete\n",
    "\n",
    "#Creating evenly disributed bins\n",
    "minimum=School_Size[\"Total Students\"].min()\n",
    "maximum=School_Size[\"Total Students\"].max()\n",
    "diff=(maximum-minimum)/3\n",
    "bins=[minimum]\n",
    "for i in range(1,3):\n",
    "    bins.append(minimum+i*diff)\n",
    "bins.append(maximum)\n",
    "Size_Category=[\"Small\",\"Medium\",\"Large\"]\n",
    "\n",
    "\n",
    "#Add the bins to our data\n",
    "School_Size[\"Size Category\"]=pd.cut(School_Size[\"Total Students\"],bins,labels=Size_Category,include_lowest=False)\n",
    "Size_Group=School_Size.groupby([\"Size Category\"])\n",
    "\n",
    "#Data frame to display results\n",
    "size_df = pd.DataFrame({\n",
    "    \"Average Math Score\": Size_Group[\"math_score\"].mean().map(\"{:.3f}\".format),\n",
    "    \"Average Reading Score\": Size_Group[\"reading_score\"].mean().map(\"{:.3f}\".format),\n",
    "    \"Percent Passing Math\":(School_Size.loc[School_Size[\"math_score\"]>=70,:].groupby([\"Size Category\"])[\"Student ID\"].count()/Size_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format),\n",
    "    \"Percent Passing Reading\":(School_Size.loc[School_Size[\"reading_score\"]>=70,:].groupby([\"Size Category\"])[\"Student ID\"].count()/Size_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format),\n",
    "    \"Percent Passing Overall\":(School_Size.loc[(School_Size[\"reading_score\"]>=70) & (School_Size[\"math_score\"]>=70),:].groupby([\"Size Category\"])[\"Student ID\"].count()/Size_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format)\n",
    "})\n",
    "\n",
    "\n",
    "size_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Perform the same operations as above, based on school type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Duplicate the School Data Complete\n",
    "School_Type=school_data_complete\n",
    "\n",
    "Type_Group=School_Type.groupby([\"School Type\"])\n",
    "\n",
    "#Data frame to display results\n",
    "Type_df = pd.DataFrame({\n",
    "    \"Average Math Score\": Type_Group[\"math_score\"].mean().map(\"{:.3f}\".format),\n",
    "    \"Average Reading Score\": Type_Group[\"reading_score\"].mean().map(\"{:.3f}\".format),\n",
    "    \"Percent Passing Math\":(School_Type.loc[School_Type[\"math_score\"]>=70,:].groupby([\"School Type\"])[\"Student ID\"].count()/Type_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format),\n",
    "    \"Percent Passing Reading\":(School_Type.loc[School_Type[\"reading_score\"]>=70,:].groupby([\"School Type\"])[\"Student ID\"].count()/Type_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format),\n",
    "    \"Percent Passing Overall\":(School_Type.loc[(School_Type[\"reading_score\"]>=70) & (School_Type[\"math_score\"]>=70),:].groupby([\"School Type\"])[\"Student ID\"].count()/Type_Group[\"Student ID\"].count()*100).map(\"{:.3f}%\".format)\n",
    "})\n",
    "\n",
    "\n",
    "Type_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nteract": {
   "version": "0.8.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
